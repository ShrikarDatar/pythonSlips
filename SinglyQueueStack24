class Node:

   def __init__(self,data,nextNode=None):
       self.data = data
       self.nextNode = nextNode

   def getData(self):
       return self.data

   def setData(self,val):
       self.data = val

   def getNextNode(self):
       return self.nextNode

   def setNextNode(self,val):
       self.nextNode = val

class LinkedList:

   def __init__(self,head = None):
       self.head = head
       self.size = 0

   def getSize(self):
       return self.size

   def addNode(self,data):
       newNode = Node(data,self.head)
       self.head = newNode
       self.size+=1
       return True
       
   def printNode(self):
       curr = self.head
       while curr:
           print(curr.data)
           curr = curr.getNextNode()

myList = LinkedList()
print("Inserting")
print(myList.addNode(5))
print(myList.addNode(15))
print(myList.addNode(25))
print("Printing")
myList.printNode()




print("----------------------------------------------------------------------------")


# PYTHON STACK
class myStack:
     def __init__(self):
         self.container = [] 
     def isEmpty(self):
         return self.size() == 0  
     def push(self, item):
         self.container.append(item) 
     def pop(self):
         return self.container.pop()  
     def peek(self):
         if self.isEmpty():
             raise Exception("Stack empty!")
         return self.container[-1]  
     def size(self):
         return len(self.container) 
     def show(self):
         return self.container 

s = myStack()
s.push('1')
s.push('2')
print(s.pop())
print(s.show())




print("----------------------------------------------------------------------------")


# QUEUE IN PYTHON

class Queue:
    def __init__(self):
        self.items = []

    def isEmpty(self):
        return self.items == []

    def enqueue(self, item):
        self.items.insert(0,item)

    def dequeue(self):
        return self.items.pop()

    def size(self):
        return len(self.items)
    def show(self):
        return self.items
	
q=Queue()
q.enqueue(4)
q.enqueue('dog')
q.enqueue(True)
q.dequeue()
print(q.show())
